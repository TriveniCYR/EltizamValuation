@using Eltizam.Utility.Models;
@using Microsoft.AspNetCore.Http
@using Eltizam.Web.Controllers
@using Microsoft.AspNetCore.Mvc.Localization
@inject IHttpContextAccessor HttpContextAccessor
@inject Microsoft.Extensions.Localization.IStringLocalizer<Eltizam.Resource.Master> MasterLocalizer
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@inject Microsoft.Extensions.Localization.IStringLocalizer<Eltizam.Resource.Shared> SharedLocalizer

@model Eltizam.Business.Models.MasterValuationFeesModel
@{
    string jsVersion = @Configuration.GetSection("StaticJS")["version"];
    var _header = " Valuation Fees Master";
    var _md = Model.Id > 0 ? "Edit" : "Add";
    ViewData["Title"] = _md + _header;
    var objPermssion = (RolePermissionModel)ViewBag.Access;
    var isAdd = objPermssion.Add ? 1 : 0;
    var isEdit = objPermssion.Edit ? 1 : 0;
}
<div id="PlaceHolderHere"></div>
<main>
    <div class="whiteBoxShadow">
        <div class="heading position-relative flex justify-between ">
            <h3 class="dashboardTitle">@_md @_header</h3>
            <div class="hamburger">
                <a class="greyBtn lineBtn formAbtn" asp-action="ValuationFees">@_header</a>
                <img src="../assets/right-arrow.svg" alt="hamburger-icon" />
                <span>@_md</span>
            </div>
        </div>

        <div class="bodyContent">
            <div class="inputSearchs p-0">
                <form asp-action="ValuationFeeManage" autocomplete="off" asp-controller="MasterValuationFee" method="post">
                    <input type="hidden" id="isAddPerm" value="@isAdd" />
                    <input type="hidden" id="isEditPerm" value="@isEdit" />
                    <input type="hidden" id="hdnProperty" value="@(Model == null ? 0 : Model.PropertyTypeId)" />
                    @Html.HiddenFor(model => model.Id, new { @class = "control-label" })

                    <input type="hidden" id="hdnId" value="@(Model == null ? 0 : Model.Id)" />
                    <input type="hidden" id="hdnPropertySub" value="@(Model == null ? 0 : Model.PropertySubTypeId)" />
                    <input type="hidden" id="hdnClientType" value="@(Model == null ? 0 : Model.ClientTypeId)" />
                    <input type="hidden" id="hdnOwnershipType" value="@(Model == null ? 0 : Model.OwnershipTypeId)" />
                    <input type="hidden" id="hdnValuationFeeType" value="@(Model == null ? 0 : Model.ValuationFeeTypeId)" />

                    <div>
                        <div class="flex">
                            <label for="PropertyTypeId" class="w-50">
                                <p class="m-0">Property Type Name<span class="text-danger">*</span></p>
                                @Html.DropDownListFor(model => model.PropertyTypeId, new List<SelectListItem> { }, new { @class = "form-control", @onchange = "BindPropertySub(this.options[this.selectedIndex].value)"})
                                @Html.ValidationMessageFor(model => model.PropertyTypeId, "", new { @class = "text-danger" })
                            </label>
                            <label for="" class="w-50">
                                Status

                                <input type="checkbox" id="addLocation" class="input-switch" name="IsActive" value="@Model.IsActive" @(Model.IsActive ? "checked" : "") required />
                                <label class="label-switch" for="addLocation"></label>
                                <span class="info-text" style="top:-20px;"></span>
                            </label>
                            
                        </div>
                        <div class="flex">
                            <label for="" class="w-50">
                                <p class="m-0">Property SubType Name<span class="text-danger">*</span></p>
                                @Html.DropDownListFor(model => model.PropertySubTypeId, new List<SelectListItem> { }, new { @class = "form-control",/*  @disabled = "disabled" */})
                                @Html.ValidationMessageFor(model => model.PropertySubTypeId, "", new { @class = "text-danger" })
                            </label>
                            <label for="" class="w-50">
                                <p class="m-0">Type of Ownership<span class="text-danger">*</span></p>
                                @Html.DropDownListFor(model => model.OwnershipTypeId, new List<SelectListItem> { }, new { @class = "form-control"})
                                @Html.ValidationMessageFor(model => model.OwnershipTypeId, "", new { @class = "text-danger" })
                            </label>
                            
                        </div>
                        <div class="flex">
                            <label for="" class="w-50">
                                <p class="m-0">Client Type<span class="text-danger">*</span></p>
                                @Html.DropDownListFor(model => model.ClientTypeId, new List<SelectListItem> { }, new { @class = "form-control"})
                                @Html.ValidationMessageFor(model => model.ClientTypeId, "", new { @class = "text-danger" })
                            </label>
                            <label for="CarpetAreaInSqFt" class="w-50">
                                <p class="m-0">Carpet Area (Sq.Ft)<span class="text-danger">*</span></p>
                                @Html.EditorFor(model => model.CarpetAreaInSqFt, new { htmlAttributes = new { @autocomplete = "off", @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.CarpetAreaInSqFt, "", new { @class = "text-danger" })
                            </label>

                           
                        </div>
                        <div class="flex">
                            <label for="CarpetAreaInSqMtr" class="w-50">
                                <p class="m-0">Carpet Area (Sq.Meter)<span class="text-danger">*</span></p>
                                @Html.EditorFor(model => model.CarpetAreaInSqMtr, new { htmlAttributes = new { @autocomplete = "off", @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.CarpetAreaInSqMtr, "", new { @class = "text-danger" })
                            </label>
                            <label for="" class="w-50">
                                <p class="m-0">Valuation Fee Type<span class="text-danger">*</span></p>
                                @Html.DropDownListFor(model => model.ValuationFeeTypeId, new List<SelectListItem> { }, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ValuationFeeTypeId, "", new { @class = "text-danger" })
                            </label>
                           
                        </div>
                        <div class="flex">
                            <label for="" class="w-50">
                                Valuation Type
                                <div class="flex m-0 valuationType">
                                    @Html.DropDownList("ValuationType", new List<SelectListItem>{
                                    new SelectListItem{ Text="General", Value = "1" },
                                    new SelectListItem{ Text="Fixed", Value = "2" }}, new { @class = "form-control" })

                                </div>
                            </label>
                        </div>
                    </div>

                    <div class="roundBorderBox">
                        <h3 class="mb-28" id="hdnHeader">Valuation Charges</h3>

                        <div id="general">

                            <div class="flex">
                                <label for="" class="w-50">
                                    <p class="m-0">Valuation Fees (AED)<span class="text-danger">*</span></p>
                                    @Html.EditorFor(model => model.ValuationFees, new { htmlAttributes = new { @autocomplete = "off", @class = "form-control" ,@placeholder="enter Valuation Fees (AED)"} })
                                    @Html.ValidationMessageFor(model => model.ValuationFees, "", new { @class = "text-danger" })
                                </label>
                                <label for="" class="w-50">
                                    <p class="m-0">VAT (Percent)<span class="text-danger">*</span></p>
                                    @Html.EditorFor(model => model.Vat, new { htmlAttributes = new { @autocomplete = "off", @class = "form-control", @placeholder="enter VAT (Percent)"} })
                                    @Html.ValidationMessageFor(model => model.Vat, "", new { @class = "text-danger" })
                                </label>
                            </div>
                            <div class="flex">
                                <label for="" class="w-50">
                                    <p class="m-0">Other Charges<span class="text-danger">*</span></p>
                                    @Html.EditorFor(model => model.OtherCharges, new { htmlAttributes = new { @autocomplete = "off", @class = "form-control",placeholder="enter other chargesr" } })
                                    @Html.ValidationMessageFor(model => model.OtherCharges, "", new { @class = "text-danger" })
                                </label>
                                <label for="" class="w-50">
                                    <p class="m-0">Total evaluation Fees<span class="text-danger">*</span></p>
                                    @Html.EditorFor(model => model.TotalValuationFees, new { htmlAttributes = new { @autocomplete = "off", @class = "form-control",@placeholder="enter Total evaluation Fees" } })
                                    @Html.ValidationMessageFor(model => model.TotalValuationFees, "", new { @class = "text-danger" })
                                </label>
                            </div>
                        </div>

                        <div id="fixed">
                            <label for="" class="w-50">
                                <p class="m-0">Fixed valuation Fees<span class="text-danger">*</span></p>
                                @Html.EditorFor(model => model.FixedvaluationFees, new { htmlAttributes = new { @autocomplete = "off", @class = "form-control",@placeholder="enter Fixed evaluation Fees" } })
                                @Html.ValidationMessageFor(model => model.FixedvaluationFees, "", new { @class = "text-danger" })
                            </label>
                        </div>
                    </div>

                    <div class="text-right buttonArea bodyContent plr-0">
                        <a href='/MasterValuationFee/ValuationFees'> <button type="button" class="lineBtn greyBtn mr-12">Cancel</button></a>
                        <button type="submit" id="btnSaveEdit" class="bgBlue">@SharedLocalizer["Save"]</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</main>

@section MyScripts {
    <script type="text/javascript" src="~/js/custom/ValuationFee/valuationfeemanage.js?v=@jsVersion"></script>

    <script>

        $(document).ready(function () {
            $('#ValuationFees').keypress(function (e) {
                debugger
                if ($('#ValuationFees').val() == '' && (e.which == 48 || e.charCode == 46)) {
                    return false;
                }
                else {
                    if ((e.charCode >= 48 && e.charCode <= 57) || e.charCode == 46) {
                        var keypress = e.keyCode || e.which || e.charCode;
                        var key = String.fromCharCode(keypress);
                        var regEx = /^[0-9]{0,12}(.[0-9]{0,6})?$/;

                        var txt = $(this).val() + key;
                        if (!regEx.test(txt)) {
                            if (keypress != 8) {
                                e.preventDefault();
                            } else {
                            }
                        }
                    }
                    else {
                        e.preventDefault();
                    }
                }
            });
            $('#Vat').keypress(function (e) {
                if ($('#Vat').val() == '' && (e.which == 48 || e.charCode == 46)) {
                    return false;
                }
                else {
                    if ((e.charCode >= 48 && e.charCode <= 57) || e.charCode == 46) {
                        var keypress = e.keyCode || e.which || e.charCode;
                        var key = String.fromCharCode(keypress);
                        var regEx = /^[0-9]{0,12}(.[0-9]{0,6})?$/;

                        var txt = $(this).val() + key;
                        if (!regEx.test(txt)) {
                            if (keypress != 8) {
                                e.preventDefault();
                            } else {
                            }
                        }
                    }
                    else {
                        e.preventDefault();
                    }
                }
            });
            $('#OtherCharges').keypress(function (e) {
                if ($('#OtherCharges').val() == '' && (e.which == 48 || e.charCode == 46)) {
                    return false;
                }
                else {
                    if ((e.charCode >= 48 && e.charCode <= 57) || e.charCode == 46) {
                        var keypress = e.keyCode || e.which || e.charCode;
                        var key = String.fromCharCode(keypress);
                        var regEx = /^[0-9]{0,12}(.[0-9]{0,6})?$/;

                        var txt = $(this).val() + key;
                        if (!regEx.test(txt)) {
                            if (keypress != 8) {
                                e.preventDefault();
                            } else {
                            }
                        }
                    }
                    else {
                        e.preventDefault();
                    }
                }
            });

            $('#TotalValuationFees').keypress(function (e) {
                if ($('#TotalValuationFees').val() == '' && (e.which == 48 || e.charCode == 46)) {
                    return false;
                }
                else {
                    if ((e.charCode >= 48 && e.charCode <= 57) || e.charCode == 46) {
                        var keypress = e.keyCode || e.which || e.charCode;
                        var key = String.fromCharCode(keypress);
                        var regEx = /^[0-9]{0,12}(.[0-9]{0,6})?$/;

                        var txt = $(this).val() + key;
                        if (!regEx.test(txt)) {
                            if (keypress != 8) {
                                e.preventDefault();
                            } else {
                            }
                        }
                    }
                    else {
                        e.preventDefault();
                    }
                }
            });

            $('#FixedvaluationFees').keypress(function (e) {
                if ($('#FixedvaluationFees').val() == '' && (e.which == 48 || e.charCode == 46)) {
                    return false;
                }
                else {
                    if ((e.charCode >= 48 && e.charCode <= 57) || e.charCode == 46) {
                        var keypress = e.keyCode || e.which || e.charCode;
                        var key = String.fromCharCode(keypress);
                        var regEx = /^[0-9]{0,12}(.[0-9]{0,6})?$/;

                        var txt = $(this).val() + key;
                        if (!regEx.test(txt)) {
                            if (keypress != 8) {
                                e.preventDefault();
                            } else {
                            }
                        }
                    }
                    else {
                        e.preventDefault();
                    }
                }
            });
        });
        var DeleteValuationByIdUrl = "@Eltizam.Web.Helpers.APIURLHelper.DeleteValuationById";
        var DeleteLabel = "@SharedLocalizer["Delete"]";
        var ErrorMessage = "@SharedLocalizer["Error"]";
        var RecordDelete = "@SharedLocalizer["RecordDelete"]";
        var StatusMessage = '@TempData["StatusMessage"]';

        //#region Setup API Url
        var ValuationFees = "@Eltizam.Web.Helpers.APIURLHelper.GetAllValuation";

        var PropertyList = "@Eltizam.Web.Helpers.APIURLHelper.GetPropertyTypeList";//GetAllPropertyType";
        var ClientTypeList = "@Eltizam.Web.Helpers.APIURLHelper.GetSearchClientType";
        var OwnershipTypeList = "@Eltizam.Web.Helpers.APIURLHelper.OwnershipTypeList";//GetAllOwnershipType";
        var ValuationFeeTypeList = "@Eltizam.Web.Helpers.APIURLHelper.ValuationFeeTypeList";//GetAllValuationFeeType";
        var PropertyByIdSubType = "@Eltizam.Web.Helpers.APIURLHelper.GetPropertyByPropertyTypeId";

        //#region Static Messae Init
        var EditLabel = "@SharedLocalizer["Edit"]";

        var AddLabel = "@SharedLocalizer["Add"]";
        var UpdateLabel = "@SharedLocalizer["Update"]";
    </script>

}
