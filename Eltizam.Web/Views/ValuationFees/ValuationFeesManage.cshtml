@using Eltizam.Utility.Models;
@using Microsoft.AspNetCore.Http
@using Eltizam.Web.Controllers
@using Microsoft.AspNetCore.Mvc.Localization
@inject IHttpContextAccessor HttpContextAccessor
@inject Microsoft.Extensions.Localization.IStringLocalizer<Eltizam.Resource.Master> MasterLocalizer
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@inject Microsoft.Extensions.Localization.IStringLocalizer<Eltizam.Resource.Shared> SharedLocalizer

@model Eltizam.Business.Models.MasterValuationFeesModel
@{
    // ViewData["Title"] = @MasterLocalizer["ValuationFees"];
    // RolePermissionModel objPermssion = (RolePermissionModel)ViewBag._objPermission;
    // string IsAddAllow = (objPermssion.Add) ? "" : "display: none";
    // string IsEditAllow = (objPermssion.Edit) ? "" : "display: none";
    // string IsDeleteAllow = (objPermssion.Delete) ? "" : "display: none";
    string jsVersion = @Configuration.GetSection("StaticJS")["version"];
}
<div id="PlaceHolderHere"></div>
<main>
    <div class="whiteBoxShadow">
        <div class="heading position-relative flex justify-between ">
            @if (Model.Id > 0)
            {
                <h3 class="dashboardTitle">EDIT VALUATION FEES MASTER</h3>
                <div class="hamburger">
                    <span onclick="resourceMaster()">Valuation Master</span>
                    <img src="../assets/right-arrow.svg" alt="hamburger-icon" />
                    <span>Edit Resource Master</span>
                </div>
            }
            else
            {
                <h3 class="dashboardTitle">ADD VALUATION FEES MASTER</h3>
                <div class="hamburger">
                    <span onclick="resourceMaster()">Valuation Master</span>
                    <img src="../assets/right-arrow.svg" alt="hamburger-icon" />
                    <span>Add Resource Master</span>
                </div>
            }
        </div>
        <div class="bodyContent">
            <div class="inputSearchs">
                <form asp-action="ValuationFeesManage" autocomplete="off" asp-controller="ValuationFees" method="post">
                    <input type="hidden" id="hdnProperty" value="@(Model == null ? 0 : Model.PropertyTypeId)" />
                    <input type="hidden" id="hdnPropertySub" value="@(Model == null ? 0 : Model.PropertySubTypeId)" />
                    <input type="hidden" id="hdnClientType" value="@(Model == null ? 0 : Model.ClientTypeId)" />
                    <input type="hidden" id="hdnOwnershipType" value="@(Model == null ? 0 : Model.OwnershipTypeId)" />
                    <input type="hidden" id="hdnValuationFeeType" value="@(Model == null ? 0 : Model.ValuationFeeTypeId)" />
                    @* <input type="hidden" id="hdnId" asp-for="Id" value="@(Model == null ? 0 : Model.Id)" /> *@
                    <div class="roundBorderBox">
                        <h3 class="mb-28">Property Details</h3>
                        <div class="flex">
                            <label for="PropertyTypeId">
                                Property Type Name
                               @*  <select id="PropertyTypeId" name="PropertyTypeId" class="form-control" asp-for="PropertyTypeId"></select> *@
                                @Html.DropDownListFor(model => model.PropertyTypeId, new List<SelectListItem> { }, new { @class = "form-control", @onchange = "BindPropertySub(this.options[this.selectedIndex].value)"})

                            </label>
                           @*  <label for="">
                                Property Type Name
                                <input type="text" placeholder="enter Property Type Name">
                            </label> *@
                            <label for="">
                                Property SubType Name
                               @*  <input type="text" placeholder="enter Property SubType Name"> *@
                                @Html.DropDownListFor(model => model.PropertySubTypeId, new List<SelectListItem> { }, new { @class = "form-control", @disabled = "disabled"})
                            </label>
                            <label for="">
                                Type of Ownership
                                @* <input type="text" placeholder="enter Type of Ownership"> *@
                                @Html.DropDownListFor(model => model.OwnershipTypeId, new List<SelectListItem> { }, new { @class = "form-control"})
                            </label>
                            <label for="">
                                Client Type
                                @* <input type="text" placeholder="enter Client Type" /> *@
                                @Html.DropDownListFor(model => model.ClientTypeId, new List<SelectListItem> { }, new { @class = "form-control"})
                            </label>
                        </div>
                        <div class="flex">
                            <label for="CarpetAreaInSqFt">
                                Carpet Area (Sq.Ft)
                                @* <input type="text" placeholder="enter Carpet Area (Sq.Ft)" /> *@
                                @Html.EditorFor(model => model.CarpetAreaInSqFt, new { htmlAttributes = new { @autocomplete = "off", @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.CarpetAreaInSqFt, "", new { @class = "text-danger" })
                            </label>

                            <label for="CarpetAreaInSqMtr">
                                Carpet Area (Sq.Meter)
                                @* <input type="text" placeholder="enter Carpet Area (Sq.Meter)"> *@
                                @Html.EditorFor(model => model.CarpetAreaInSqMtr, new { htmlAttributes = new { @autocomplete = "off", @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.CarpetAreaInSqMtr, "", new { @class = "text-danger" })
                            </label>
                            <label for="">
                                Valuation Fee Type
                                @* <input type="text" placeholder="enter Valuation Fee Type"> *@
                                @Html.DropDownListFor(model => model.ValuationFeeTypeId, new List<SelectListItem> { }, new { @class = "form-control"})
                            </label>
                            <label for="">
                                Valuation Type
                                <div class="flex m-0 valuationType">
                                    <input type="radio" value="Fixed" name="valuationType" class="cursor-pointer" />
                                    <input type="radio" value="General" name="valuationType" class="cursor-pointer" />
                                </div>
                            </label>
                        </div>
                        <div class="flex">
                            <label for="">
                                Status
                                <input class='input-switch' type="checkbox" id="addLocation" required />
                                <label class="label-switch" for="addLocation"></label>
                                <span class="info-text"></span>
                            </label>
                        </div>
                    </div>
                    <div class="roundBorderBox">
                        <h3 class="mb-28">Valuation Charges - General Valuation Fees</h3>
                        <div class="flex">
                            <label for="">
                                Valuation Fees (AED)
                                @* <input type="text" placeholder="enter Valuation Fees (AED)"> *@
                                @Html.EditorFor(model => model.ValuationFees, new { htmlAttributes = new { @autocomplete = "off", @class = "form-control" ,@placeholder="enter Valuation Fees (AED)"} })
                                @Html.ValidationMessageFor(model => model.ValuationFees, "", new { @class = "text-danger" })
                            </label>
                            <label for="">
                                VAT (Percent)
                                @* <input type="text" placeholder="enter VAT (Percent)"> *@
                                @Html.EditorFor(model => model.Vat, new { htmlAttributes = new { @autocomplete = "off", @class = "form-control", @placeholder="enter VAT (Percent)"} })
                                @Html.ValidationMessageFor(model => model.Vat, "", new { @class = "text-danger" })
                            </label>
                            <label for="">
                                Other Charges
                                @* <input type="text" placeholder="ente other chargesr"> *@
                                @Html.EditorFor(model => model.OtherCharges, new { htmlAttributes = new { @autocomplete = "off", @class = "form-control",placeholder="enter other chargesr" } })
                                @Html.ValidationMessageFor(model => model.OtherCharges, "", new { @class = "text-danger" })
                            </label>
                            <label for="">
                                Total evaluation Fees
                                @* <input type="text" placeholder="enter Total evaluation Fees"> *@
                                @Html.EditorFor(model => model.TotalValuationFees, new { htmlAttributes = new { @autocomplete = "off", @class = "form-control",@placeholder="enter Total evaluation Fees" } })
                                @Html.ValidationMessageFor(model => model.TotalValuationFees, "", new { @class = "text-danger" })
                            </label>
                        </div>
                    </div>
                    <div class="text-center buttonArea">
                        <button type="button" class="lineBtn greyBtn" id="profileDetailsRedirect">Cancel</button>
                        <button type="submit" class="blueBtn">Save</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</main>


<div id="DeleteValuationModel" class="modal themeModal " role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@SharedLocalizer["Delete"]</h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            @Html.Label(@SharedLocalizer["DeleteConfirm"])
                        </div>
                    </div>
                </div>
                @Html.Hidden("ID")
                <div class="card-footer text-center">
                    <button type="button" onclick="DeleteValuation()" data-dismiss="modal" class="btn btn-primary mr-2">@SharedLocalizer["Yes"]</button>
                    <a class="btn btn-danger" data-dismiss="modal">@SharedLocalizer["No"]</a>
                </div>
            </div>
        </div>
    </div>
</div>

@section MyScripts {

    @Html.Partial("_DataTablePartial")

    @* <script type="text/javascript" src="~/js/Custom/Department/DepartmentManagement.js?v=@jsVersion"></script> *@
    <input type="hidden" id="hdnBaseURL" value="@Configuration.GetSection("Apiconfig")["baseurl"]" />
    <script src="~/AdminLTE/plugins/jquery/jquery.min.js"></script>

    <script type="text/javascript" src="~/js/Custom/main.js?v=@jsVersion"></script>
    <script type="text/javascript" src="~/js/Custom/CustomDateFormat.js?v=@jsVersion"></script>
    <script type="text/javascript" src="~/js/Custom/JqueryExtension.js?v=@jsVersion"></script>

    @* <script type="text/javascript" src="~/js/Custom/DynamicDataTable.js?v=@jsVersion"></script>
    <script type="text/javascript" src="~/js/custom/valuation/valuationmanagement.js?v=@jsVersion"></script> *@
    <script>

        var DeleteValuationByIdUrl = "@Eltizam.Web.Helpers.APIURLHelper.DeleteValuationById";
        var DeleteLabel = "@SharedLocalizer["Delete"]";
        var ErrorMessage = "@SharedLocalizer["Error"]";
        var RecordDelete = "@SharedLocalizer["RecordDelete"]";
        var StatusMessage = '@TempData["StatusMessage"]';


        //#region Setup API Url
        var ValuationFees = "@Eltizam.Web.Helpers.APIURLHelper.GetAllValuation";
        // var ResourceTypeList = "@Eltizam.Web.Helpers.APIURLHelper.GetResourceTypeList";
        // var RoleList = "@Eltizam.Web.Helpers.APIURLHelper.GetRoleList";
        // var DesignationList = "@Eltizam.Web.Helpers.APIURLHelper.GetDesignationList";
        // var DepartmentList = "@Eltizam.Web.Helpers.APIURLHelper.GetDepartmentList";
        //#region Static Messae Init
        var EditLabel = "@SharedLocalizer["Edit"]";


        var AddLabel = "@SharedLocalizer["Add"]";
        var UpdateLabel = "@SharedLocalizer["Update"]";
        var successCallBack = '@TempData[Eltizam.Web.Helpers.UserHelper.SuccessMessage]';
        if (successCallBack) {
            toastr.success(successCallBack);
        }


        function sideNavToggle() {
            var x = document.getElementById("sideNav");
            if (x.style.display === "none") {
                x.style.display = "block";
            } else {
                x.style.display = "none";
            }
        }

        $(document).ready(function () {
            BindProperty();
            BindClient();
            BindOwnership();
            BindValuationFeeType();
            // BindDesignation();
            // BindRole();
            // BindResourceType();
            // BindCountry();
            // BindState();
            // BindCity();
            // BindGender();
        });

        function BindProperty() {
            debugger;
            //alert("hello");
            var PropertyList = "@Eltizam.Web.Helpers.APIURLHelper.GetAllProperty";
            var Property = $("#PropertyTypeId");
            var _val = $('#hdnProperty').val();
            var _rpname = "propertyTypeId";

            //BindDropdowns(PropertyList, Property, _rpname, _val);
            $.ajax({
                type: "POST",
                url: $('#hdnBaseURL').val() + PropertyList,
                "datatype": "json",
                success: function (response) {
                    debugger;
                    Property.empty().append('<option selected="selected" value="0">Please select</option>');
                    for (var i = 0; i < response.data.length; i++) {
                        Property.append($("<option></option>").val(response.data[i].id).html(response.data[i].propertyType));
                    }
                    if ($('#hdnProperty').val() != 0) {
                        Property.val($('#hdnProperty').val());
                    }
                },
                failure: function (response) {
                    alert(response.responseText);
                },
                error: function (response) {
                    alert(response.responseText);
                    $("#loader").hide();
                }
            });
        }

        function BindPropertySub(id) {
            debugger;
            //alert("hello");
            var PropertyByIdSubType = "@Eltizam.Web.Helpers.APIURLHelper.GetPropertyByPropertyTypeId";
            var PropertySubType = $("#PropertySubTypeId");
            var _val = $('#hdnPropertySub').val();
            var _rpname = "propertyTypeId";

            //BindDropdowns(PropertyList, Property, _rpname, _val);
            $.ajax({
               type: "GET",
                url: $('#hdnBaseURL').val() + PropertyByIdSubType +'/'+id,
               "datatype": "json",
               success: function (response) {
                    debugger;
                    //PropertySubType.empty().append('<option selected="selected" value="0">Please select</option>');
                  // for (var i = 0; i < response.data.length; i++) {
                    PropertySubType.empty().append($("<option></option>").val(response._object.id).html(response._object.propertySubType));
                   //}
                   //  if ($('#hdnPropertySub').val() != 0) {
                   //      PropertySubType.val($('#hdnPropertySub').val());
                   // }
               },
               failure: function (response) {
                   alert(response.responseText);
               },
               error: function (response) {
                   alert(response.responseText);
                   $("#loader").hide();
               }
            });
        }

        function BindClient() {
            debugger;
            //alert("hello");
            var ClientTypeList = "@Eltizam.Web.Helpers.APIURLHelper.GetSearchClientType";
            var Client = $("#ClientTypeId");
            var _val = $('#hdnClientType').val();
            var _rpname = "clientTypeId";

            //BindDropdowns(PropertyList, Property, _rpname, _val);
            $.ajax({
                type: "GET",
                url: $('#hdnBaseURL').val() + ClientTypeList,
                "datatype": "json",
                success: function (response) {
                    debugger;
                    Client.empty().append('<option selected="selected" value="0">Please select</option>');
                    for (var i = 0; i < response._object.length; i++) {
                        Client.append($("<option></option>").val(response._object[i].id).html(response._object[i].clientType));
                    }
                    if ($('#hdnClientType').val() != 0) {
                        Client.val($('#hdnClientType').val());
                    }
                },
                failure: function (response) {
                    alert(response.responseText);
                },
                error: function (response) {
                    alert(response.responseText);
                    $("#loader").hide();
                }
            });
        }

        function BindOwnership() {
            debugger;
            //alert("hello");
            var OwnershipTypeList = "@Eltizam.Web.Helpers.APIURLHelper.GetAllOwnershipType";
            var OwnershipType = $("#OwnershipTypeId");
            var _val = $('#hdnOwnershipType').val();
            var _rpname = "ownershipTypeId";

            //BindDropdowns(PropertyList, Property, _rpname, _val);
            $.ajax({
                type: "POST",
                url: $('#hdnBaseURL').val() + OwnershipTypeList,
                "datatype": "json",
                success: function (response) {
                    debugger;
                    OwnershipType.empty().append('<option selected="selected" value="0">Please select</option>');
                    for (var i = 0; i < response.data.length; i++) {
                        OwnershipType.append($("<option></option>").val(response.data[i].id).html(response.data[i].ownershipType));
                    }
                    if ($('#hdnOwnershipType').val() != 0) {
                        OwnershipType.val($('#hdnOwnershipType').val());
                    }
                },
                failure: function (response) {
                    alert(response.responseText);
                },
                error: function (response) {
                    alert(response.responseText);
                    $("#loader").hide();
                }
            });
        }

        function BindValuationFeeType() {
            debugger;
            //alert("hello");
            var ValuationFeeTypeList = "@Eltizam.Web.Helpers.APIURLHelper.GetAllValuationFeeType";
            var ValuationFeeType = $("#ValuationFeeTypeId");
            var _val = $('#hdnValuationFeeType').val();
            var _rpname = "valuationFeeTypeId";

            //BindDropdowns(PropertyList, Property, _rpname, _val);
            $.ajax({
                type: "POST",
                url: $('#hdnBaseURL').val() + ValuationFeeTypeList,
                "datatype": "json",
                success: function (response) {
                    debugger;
                    ValuationFeeType.empty().append('<option selected="selected" value="0">Please select</option>');
                    for (var i = 0; i < response.data.length; i++) {
                        ValuationFeeType.append($("<option></option>").val(response.data[i].id).html(response.data[i].valuationFeeType));
                    }
                    if ($('#hdnValuationFeeType').val() != 0) {
                        ValuationFeeType.val($('#hdnValuationFeeType').val());
                    }
                },
                failure: function (response) {
                    alert(response.responseText);
                },
                error: function (response) {
                    alert(response.responseText);
                    $("#loader").hide();
                }
            });
        }

        //#endregion
    </script>

}
