@using Microsoft.AspNetCore.Http
@using Eltizam.Web.Controllers
@using Microsoft.AspNetCore.Mvc.Localization
@inject IHttpContextAccessor HttpContextAccessor
@inject Microsoft.Extensions.Localization.IStringLocalizer<Eltizam.Resource.Master> MasterLocalizer

@inject Microsoft.Extensions.Localization.IStringLocalizer<Eltizam.Resource.Shared> SharedLocalizer
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration

@model Eltizam.Business.Models.Master_PropertyTypeModel
@{
    ViewData["Title"] = @MasterLocalizer["Property Type Manage"]; 
    string jsVersion = @Configuration.GetSection("StaticJS")["version"];
    Layout = "_Layout";

}
<main>
<form>
    
        <div class="whiteBoxShadow">
            <div class="heading position-relative">
                <h3 class="dashboardTitle">Property Sub Type</h3>
            </div>
            <div class="bodyContent">
                <div class="inputSearchs">
                    <input type="hidden" id="hdnPropertyId" value="@(Model == null ? 0 : Model.Id)" />
                    <div class="flex mb-28">
                        @* <label for="" class="w-50">
                            
                            @Html.LabelFor(model => model.PropertyType, new { @class = "control-label" })
                            <span class="text-danger">*</span>
                            @Html.EditorFor(model => model.PropertyType, new { htmlAttributes = new { @autocomplete = "off", @class = "form-control checkbox-checked", @placeholder = @MasterLocalizer["Property Type Name"] } })
                            @Html.ValidationMessageFor(model => model.PropertyType, "", new { @class = "text-danger" })
                        </label> *@
                      @*   <label for="" class="w-50">
                          
                           @Html.LabelFor(model => model.SubTypes.ds,"Property SubType", new { @class = "control-label" })
                            <span class="text-danger">*</span>
                            @Html.DropDownListFor(model => model.Id, new List<SelectListItem> { }, new { @class = "form-control", @multiple = "multiple" })
                            @Html.ValidationMessageFor(model => model.Id, "", new { @class = "text-danger" })
                        </label> *@
                    </div>

                    <div class="flex mb-28">
                        <label for="" class="w-50">
                            Description
                            <span class="text-danger">*</span>
                            @Html.EditorFor(model => model.PropertyType, new { htmlAttributes = new { @autocomplete = "off", @class = "form-control checkbox-checked", @placeholder = @MasterLocalizer["Property Type Name"] } })
                            @Html.ValidationMessageFor(model => model.PropertyType, "", new { @class = "text-danger" })
                        </label>  

                        <label for="" class="w-50">
                            
                            Status
                            <input class='input-switch' type="checkbox" id="addLocation" required />
                            <label class="label-switch" for="addLocation"></label>
                            <span class="info-text"></span>
                        </label>


                       
                    </div>
                    <div class="dynamicInput">
                        <div class="addMoreInput buttonArea">
                            <button type="button" class="blueBtn" onclick="addInputProperty()">+ add property</button>
                        </div>
                        <div class="addPropertyInputDynamic"></div>
                    </div>


                    <div class="propertySubTypeContainer">
                        @if (Model.MasterPropertySubTypes != null)
                        {
                             @for (var i = 0; i < Model.MasterPropertySubTypes.Count; i++)
                        {
                            var _ndl = Model.MasterPropertySubTypes[i];
                            <div class="flex mb-28">
                                <label for="" class="w-50">
                                    <input type="text" id="@_ndl.Id" value="@_ndl.PropertySubType" asp-for="@_ndl.PropertySubType" class="form-control checkbox-checked" placeholder="Property SubType Name" />
                                </label>
                                @if (i >= 0)
                                {
                                    <button type="button" class="btn btn-danger removeSubType" onclick="removeAddPropInput(this)">Remove</button>
                                }
                            </div>
                        }

                        }
                       

                    </div>
                   @*  <button type="button" id="addSubTypeButton" class="btn btn-secondary">Add Property SubType</button> *@
                    <div class="text-right buttonArea bodyContent plr-0">
                        <button type="button" id="btnSaveRole" onclick="alertMsg()" class="bgBlue mr-12">Save</button>
                        <a class="greyBtn lineBtn formAbtn" asp-action="PropertyTypes">@SharedLocalizer["Cancel"]</a>
                    </div>
                </div>
            </div>
        </div>
    
</form>
</main>
<script src="~/AdminLTE/plugins/jquery/jquery.min.js"></script>
<script type="text/javascript" src="~/js/Custom/main.js?v=@jsVersion"></script>


    
    @* <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script> *@
    <script>

        //starts dynamic input button
        let blockCounter = 1;

        function addInputProperty() {
            const inputPropField = document.querySelector(".addPropertyInputDynamic");
            const uniqueId = `status-${blockCounter}`;

            const newBlock = document.createElement("div");
            newBlock.className = "flex threeBox mb-28";
            newBlock.innerHTML = `
                       
                                <label for="" class='w-30'>
                            Description
                                    <input type="text" placeholder="enter description" class="form-control">
                        </label>
                       
                        <img src="../assets/minus-icon.svg" alt="minus-icon" class="minus-icon cursor-pointer" onclick="removeAddPropInput(this)">
                    `;

            inputPropField.appendChild(newBlock);
            blockCounter++;
        }

        function removeAddPropInput(element) {
            const newAddedDiv = element.parentElement;
            newAddedDiv.remove();
        }

        function alertMsg()
        {
            alert('hi');
            debugger;
         //var  Master_PropertyTypeModel

            var Master_PropertyTypeModel = {

                'Id': '',
                'PropertyType': '',
                //'IsActive' : '',
                'MasterPropertySubTypes': [
               ]
            }

            Master_PropertyTypeModel.Id = document.getElementById('hdnPropertyId').value;
            Master_PropertyTypeModel.PropertyType = document.getElementById('PropertyType').value;

            var DynamicMasterPropertySubTypes = $(".addPropertyInputDynamic :input");

            var ExistingMasterPropertySubTypes = $(".propertySubTypeContainer :input[type='text']");
           
            for (var i = 0; i < DynamicMasterPropertySubTypes.length; i++) {
                var objDynamic = {
                    'Id': 0,
                    'PropertySubType': DynamicMasterPropertySubTypes[i].value,
                }
                Master_PropertyTypeModel.MasterPropertySubTypes.push(objDynamic);
            }

            for (var j = 0; j < ExistingMasterPropertySubTypes.length; j++)
            {
                var objExisting = {
                    'Id': ExistingMasterPropertySubTypes[j].id,
                    'PropertySubType': ExistingMasterPropertySubTypes[j].value,
                }
                Master_PropertyTypeModel.MasterPropertySubTypes.push(objExisting);
            }
           console.log(JSON.stringify(Master_PropertyTypeModel));

            var PropertyByIdSubType = "@Eltizam.Web.Helpers.APIURLHelper.UpsertPropertyType";
                //var PropertySubType = $("#PropertySubTypeId");
                var _val = $('#hdnPropertySub').val();
                var _rpname = "propertyTypeId";
            debugger;
                //BindDropdowns(PropertyList, Property, _rpname, _val);
                $.ajax({
                    type: "POST",
                     url: $('#hdnBaseURL').val() + PropertyByIdSubType ,
                    "datatype": "json",
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                   // contentType : 'multipart/form-data',
                   // "Content-Type": "application/json",
                    data: JSON.stringify(Master_PropertyTypeModel),
                    success: function (response) {
                        debugger;
                        // for (var i = 0; i < response._object.length; i++) {
                        //     PropertySubType.empty().append($("<option></option>").val(response._object.id).html(response._object.propertySubType));
                        // }
                    window.location.href = "/MasterPropertyType/PropertyTypes";
                    },
                    failure: function (response) {
                        alert(response.responseText);
                    },
                    error: function (response) {
                        alert(response.responseText);
                        $("#loader").hide();
                    }
                });

        }

        // $(document).ready(function () {

        //     var HdnId = $('#hdnPropertyId').val();
        //     if (HdnId) {

        //        // alert(HdnId);
        //         BindPropertySub(HdnId);
        //     }
        // });

        // // {
        // //     "id": 3,
        // //         "propertySubType": "Yalla sub 1",
        // //             "isActive": true,
        // //                 "createdDate": null,
        // //                     "createdBy": null,
        // //                         "modifiedDate": null,
        // //                             "modifiedBy": null,
        // //                                 "propertyTypeId": 0
        // // }

        // function BindPropertySub(id) {
        //     debugger;
        //     alert(id);
        //     //return false;
        //     //alert("hello");
        //     var PropertyByIdSubType = "@Eltizam.Web.Helpers.APIURLHelper.GetPropertyByPropertyTypeId";
        //     var PropertySubType = $("#PropertySubTypeId");
        //     var _val = $('#hdnPropertySub').val();
        //     var _rpname = "propertyTypeId";

        //     //BindDropdowns(PropertyList, Property, _rpname, _val);
        //     $.ajax({
        //         type: "GET",
        //         url: $('#hdnBaseURL').val() + PropertyByIdSubType + '/' + id,
        //         "datatype": "json",
        //         success: function (response) {
        //             debugger;
        //             for (var i = 0; i < response._object.length; i++) {
        //                 PropertySubType.empty().append($("<option></option>").val(response._object.id).html(response._object.propertySubType));
        //             }
        //         },
        //         failure: function (response) {
        //             alert(response.responseText);
        //         },
        //         error: function (response) {
        //             alert(response.responseText);
        //             $("#loader").hide();
        //         }
        //     });
        // }

    </script>


