@using Microsoft.AspNetCore.Http
@using Eltizam.Web.Controllers
@using Microsoft.AspNetCore.Mvc.Localization
@inject IHttpContextAccessor HttpContextAccessor
@inject Microsoft.Extensions.Localization.IStringLocalizer<Eltizam.Resource.Master> MasterLocalizer

@inject Microsoft.Extensions.Localization.IStringLocalizer<Eltizam.Resource.Shared> SharedLocalizer
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration

@model Eltizam.Business.Models.Master_PropertyTypeModel
@{
    ViewData["Title"] = @MasterLocalizer["Property Type Manage"];
    string jsVersion = @Configuration.GetSection("StaticJS")["version"];
    Layout = "_Layout";

}

    <form>
    <main>
        <div class="whiteBoxShadow">
            <div class="heading position-relative">
                <h3 class="dashboardTitle">Property Type</h3>
            </div>
            <div class="bodyContent">
                <div class="inputSearchs">
                    <div class="tabSection">
                    <input type="hidden" id="hdnPropertyId" value="@(Model == null ? 0 : Model.Id)" />
                   @Html.HiddenFor(model=> model.IsActive)
                    <div class="flex mb-28">
                        <label for="" class="w-50">
                           <p class="m-0"> Description
                                <span class="text-danger">*</span>
                            </p>
                            @Html.EditorFor(model => model.PropertyType, new { htmlAttributes = new { @autocomplete = "off", @class = "form-control checkbox-checked", @placeholder = @MasterLocalizer["Property Type Name"] } })
                            @Html.ValidationMessageFor(model => model.PropertyType, "", new { @class = "text-danger" })
                        </label>

                        <label for="" class="w-50">

                            Status
                            
                            @* @{
                                bool isActive = Model.IsActive; // Convert 1 to true, any other value to false
                            } *@

                            <input type="checkbox" id="addLocation" class="input-switch" name="IsActive" value="@Model.IsActive" @(Model.IsActive ? "checked" : "") required />
                            <label class="label-switch" for="addLocation"></label>
                            <span class="info-text" style="top:-20px;"></span>
                            @* @Html.CheckBox("IsActive", new { htmlAttributes = new {  @class = "form-control checkbox-checked", @placeholder = @MasterLocalizer["IsActive"] } }) *@
                          @*   @Html.EditorFor(model => model.IsActive, new { htmlAttributes = new {  @class = "form-control checkbox-checked", @placeholder = @MasterLocalizer["IsActive"] } }) *@
                             @*    <input class='input-switch' type="checkbox" asp-for="IsActive" />
                                <label class="label-switch" for="IsActive"></label>
                                <span class="info-text"></span> *@
                           
                           @*  <input class='input-switch' type="checkbox" id="addLocation" required /> *@
                            @* <label class="label-switch" for="addLocation"></label> *@
                            @* <span class="info-text"></span> *@
                        </label>



                    </div>
                    <div class="dynamicInput">
                        <div class="addMoreInput buttonArea">
                            <button type="button" class="blueBtn" onclick="addInputProperty()">+ add property</button>
                        </div>
                        <div class="addPropertyInputDynamic"></div>
                    </div>


                    <div class="propertySubTypeContainer">
                        @if (Model.MasterPropertySubTypes != null)
                        {
                            @for (var i = 0; i < Model.MasterPropertySubTypes.Count; i++)
                            {
                                var _ndl = Model.MasterPropertySubTypes[i];
                                <div class="flex mb-28">
                                    <label for="" class="w-50">
                                        <input type="text" id="@_ndl.Id" value="@_ndl.PropertySubType" asp-for="@_ndl.PropertySubType" class="form-control checkbox-checked" placeholder="Property SubType Name" />
                                    </label>
                                    @if (i >= 0)
                                    {
                                         <img src="../assets/minus-icon.svg" alt="minus-icon" class="minus-icon cursor-pointer" onclick="removeAddPropInput(this)">
                                    }
                                </div>
                            } 
                        } 
                    </div>
                    @*  <button type="button" id="addSubTypeButton" class="btn btn-secondary">Add Property SubType</button> *@
                    <div class="text-right buttonArea bodyContent plr-0"> 
                        <a class="greyBtn lineBtn formAbtn" asp-action="PropertyTypes">@SharedLocalizer["Cancel"]</a>
                        <button type="button" id="btnSaveRole" onclick="SavePropertyType()" class="bgBlue mr-12">Save</button>
                    </div>
                </div>

                </div>
            </div>
        </div>
    </main>
    </form>


<script src="~/AdminLTE/plugins/jquery/jquery.min.js"></script>
<script type="text/javascript" src="~/js/Custom/main.js?v=@jsVersion"></script>

<script>

    //starts dynamic input button
    let blockCounter = 1;

    function addInputProperty() {
        const inputPropField = document.querySelector(".addPropertyInputDynamic");
        const uniqueId = `status-${blockCounter}`;

        const newBlock = document.createElement("div");
        newBlock.className = "flex threeBox mb-28";
        newBlock.innerHTML = `<label for="" class='w-50'> <input type="text" placeholder="enter description" class="form-control"></label>
                                     <img src="../assets/minus-icon.svg" alt="minus-icon" class="minus-icon cursor-pointer" onclick="removeAddPropInput(this)">`;

        inputPropField.appendChild(newBlock);
        blockCounter++;
    }

    function removeAddPropInput(element) {
        const newAddedDiv = element.parentElement;
        newAddedDiv.remove();
    }

    function SavePropertyType() {
        var Master_PropertyTypeModel = {
            'Id': '',
            'PropertyType': '',
            'IsActive' : '',
            'MasterPropertySubTypes': [
            ]
        }
        // $(document).ready(function () {
        //     if ($('#IsActive')[0].value == 0) {
        //         $('#IsActive')[0].checked = 0;
        //     }
        //     else
        //     {
        //         $('#IsActive')[0].checked = 1;
        //     }

        // });
       

        Master_PropertyTypeModel.Id = document.getElementById('hdnPropertyId').value;
        Master_PropertyTypeModel.PropertyType = document.getElementById('PropertyType').value;
        Master_PropertyTypeModel.IsActive = $('#addLocation')[0].checked;

        var DynamicMasterPropertySubTypes = $(".addPropertyInputDynamic :input");

        var ExistingMasterPropertySubTypes = $(".propertySubTypeContainer :input[type='text']");

        for (var i = 0; i < DynamicMasterPropertySubTypes.length; i++) {
            var objDynamic = {
                'Id': 0,
                'PropertySubType': DynamicMasterPropertySubTypes[i].value,
            }
            Master_PropertyTypeModel.MasterPropertySubTypes.push(objDynamic);
        }

        for (var j = 0; j < ExistingMasterPropertySubTypes.length; j++) {
            var objExisting = {
                'Id': ExistingMasterPropertySubTypes[j].id,
                'PropertySubType': ExistingMasterPropertySubTypes[j].value,
            }
            Master_PropertyTypeModel.MasterPropertySubTypes.push(objExisting);
        }
        console.log(JSON.stringify(Master_PropertyTypeModel));

        var PropertyByIdSubType = "@Eltizam.Web.Helpers.APIURLHelper.UpsertPropertyType";
        //var PropertySubType = $("#PropertySubTypeId");
        var _val = $('#hdnPropertySub').val();
        var _rpname = "propertyTypeId"; 

        //BindDropdowns(PropertyList, Property, _rpname, _val);
        $.ajax({
            type: "POST",
            url: $('#hdnBaseURL').val() + PropertyByIdSubType,
            "datatype": "json",
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }, 
            data: JSON.stringify(Master_PropertyTypeModel),
            success: function (response) { 
                window.location.href = "/MasterPropertyType/PropertyTypes";
            },
            failure: function (response) {
                alert(response.responseText);
            },
            error: function (response) {
                alert(response.responseText);
                $("#loader").hide();
            }
        }); 
    } 
</script>


