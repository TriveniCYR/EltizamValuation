@using Microsoft.AspNetCore.Http
@using Eltizam.Web.Controllers
@using Microsoft.AspNetCore.Mvc.Localization
@using Eltizam.Utility.Models
@inject IHttpContextAccessor HttpContextAccessor
@inject Microsoft.Extensions.Localization.IStringLocalizer<Eltizam.Resource.Master> MasterLocalizer

@inject Microsoft.Extensions.Localization.IStringLocalizer<Eltizam.Resource.Shared> SharedLocalizer
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration

@model Eltizam.Business.Models.MasterRoleEntity
@{
    ViewData["Title"] = @MasterLocalizer["Role Manage"];
    string jsVersion = @Configuration.GetSection("StaticJS")["version"];
    var _header = "Role Master";
    var _md = Model.Id > 0 ? "Edit" : "Add";
    var objPermssion = (RolePermissionModel)ViewBag.Access;
    var isAdd = objPermssion.Add ? 1 : 0;
    var isEdit = objPermssion.Edit ? 1 : 0;
}

<div id="PlaceHolderHere"></div>
<main>
    <div class="whiteBoxShadow">
        <div class="heading position-relative flex justify-between ">
            <h3 class="dashboardTitle">@_md @_header</h3>
            <div class="hamburger">
                <a class="greyBtn lineBtn formAbtn" asp-action="Roles">@_header</a>
                <img src="../assets/right-arrow.svg" alt="hamburger-icon" />
                <span>@_md</span>
            </div>
        </div>

        <div class="bodyContent">
            <div class="inputSearchs p-0">
                <form asp-action="RoleManage" autocomplete="off" asp-controller="MasterRole" method="post">
                    <input type="hidden" id="isAddPerm" value="@isAdd" />
                    <input type="hidden" id="isEditPerm" value="@isEdit" />
                    @Html.HiddenFor(m => m.Id)
                    <div>
                        <div class="flex">
                            <div class="w-50">
                                <div class="form-group required">
                                    <p class="m-0">Role Name<span class="text-danger">*</span></p>
                                    @Html.EditorFor(model => model.RoleName, new { htmlAttributes = new { @autocomplete = "off", @class = "form-control checkbox-checked", @placeholder = @MasterLocalizer["RoleName"] } })
                                    @Html.ValidationMessageFor(model => model.RoleName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="w-50">
                                <div class="flex flex-start align-item-center required isActive m-0">
                                    @if (Model.IsUserAssigned && Model.IsActive)
                                    {
                                        <label for="IsActive" class="w-50">
                                            Status
                                            <input class='input-switch' type="checkbox" asp-for="IsActive" />
                                            <label class="label-switch" for="IsActive"></label>
                                            <span class="info-text"></span>
                                        </label>
                                    }
                                    else
                                    {                                        
                                        <label for="Status" class="w-50">
                                            Status
                                            <input type="checkbox" id="addLocation" class="input-switch" name="IsActive" asp-for="@Model.IsActive" required />
                                            <label class="label-switch" for="addLocation"></label>
                                            <span class="info-text" style="top:-20px;"></span>
                                        </label>
                                    }
                                </div>

                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12 table-responsive">
                                <table class="table table-bordered" id="rolemanage">
                                    <thead>
                                        <tr>
                                            <th>Module</th>
                                            <th>Sub Module</th>
                                            <th> <input type="checkbox" id="chkView" class="checkbox-checked rolechk" /> View</th>
                                            <th> <input type="checkbox" id="chkAdd" class="checkbox-checked rolechk" /> Add</th>
                                            <th><input type="checkbox" id="chkEdit" class="checkbox-checked rolechk" /> Edit</th>
                                            <th><input type="checkbox" id="chkDelete" class="checkbox-checked rolechk" /> Delete</th>
                                            <th><input type="checkbox" id="chkApprove" class="checkbox-checked rolechk" /> Approve</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @for (int i = 0; i < Model.MasterModules.Count; i++)
                                        {
                                            var perm = Model.MasterModules[i].RoleModulePermission;
                                            @Html.HiddenFor(m => m.MasterModules[i].ModuleName)
                                            @Html.HiddenFor(m => m.MasterModules[i].ModuleId)
                                            @Html.HiddenFor(m => m.MasterModules[i].RoleModulePermission.ModuleId)
                                            @Html.HiddenFor(m => m.MasterModules[i].RoleModulePermission.RoleId)
                                            <tr>
                                                <td>@Model.MasterModules[i].ModuleName</td>
                                                <td></td>
                                                <td>@Html.CheckBoxFor(model => Model.MasterModules[i].RoleModulePermission.View, new { @class = "checkbox-checked rolechk", @checked = "checked" })</td>
                                                <td>@Html.CheckBoxFor(model => Model.MasterModules[i].RoleModulePermission.Add, new { @class = "checkbox-checked rolechk", @checked = "checked" })</td>
                                                <td>@Html.CheckBoxFor(model => Model.MasterModules[i].RoleModulePermission.Edit, new { @class = "checkbox-checked rolechk", @checked = "checked" })</td>
                                                <td>@Html.CheckBoxFor(model => Model.MasterModules[i].RoleModulePermission.Delete, new { @class = "checkbox-checked rolechk", @checked = "checked" })</td>
                                                <td>@Html.CheckBoxFor(model => Model.MasterModules[i].RoleModulePermission.Approve, new { @class = "checkbox-checked rolechk", @checked = "checked" })</td>
                                            </tr>

                                            @for (int j = 0; j < Model.MasterModules[i].MasterSubModules.Count; j++)
                                            {
                                                var subModId = Model.MasterModules[i].MasterSubModules[j].SubModuleId;
                                                @Html.HiddenFor(m => m.MasterModules[i].MasterSubModules[j].SubModuleName)
                                                @Html.HiddenFor(m => m.MasterModules[i].MasterSubModules[j].ModuleId)
                                                @Html.HiddenFor(m => m.MasterModules[i].MasterSubModules[j].SubModuleId)
                                                @Html.HiddenFor(m => m.MasterModules[i].MasterSubModules[j].RoleModulePermission.SubModuleId)
                                                @Html.HiddenFor(m => m.MasterModules[i].MasterSubModules[j].RoleModulePermission.ModuleId)
                                                @Html.HiddenFor(m => m.MasterModules[i].MasterSubModules[j].RoleModulePermission.RoleId)
                                                <tr>
                                                    <td></td>

                                                    <td>@System.Text.RegularExpressions.Regex.Replace(Model.MasterModules[i].MasterSubModules[j].SubModuleName, "([a-z])([A-Z])", "$1 $2")</td>
                                                    <td> @Html.CheckBoxFor(model => Model.MasterModules[i].MasterSubModules[j].RoleModulePermission.View, new { @class = "checkbox-checked rolechk", @checked = "checked" })</td>
                                                    <td>@Html.CheckBoxFor(model => Model.MasterModules[i].MasterSubModules[j].RoleModulePermission.Add, new { @class = "checkbox-checked rolechk", @checked = "checked" })</td>
                                                    <td>@Html.CheckBoxFor(model => Model.MasterModules[i].MasterSubModules[j].RoleModulePermission.Edit, new { @class = "checkbox-checked rolechk", @checked = "checked" })</td>
                                                    <td>@Html.CheckBoxFor(model => Model.MasterModules[i].MasterSubModules[j].RoleModulePermission.Delete, new { @class = "checkbox-checked rolechk", @checked = "checked" })</td>
                                                    <td>@Html.CheckBoxFor(model => Model.MasterModules[i].MasterSubModules[j].RoleModulePermission.Approve, new { @class = "checkbox-checked rolechk", @checked = "checked" })</td>

                                                    @if (  subModId != (int)Eltizam.Utility.Enums.SubModuleEnum.ValuationRequest &&
                                                           subModId != (int)Eltizam.Utility.Enums.SubModuleEnum.ValuationQuotation &&
                                                           subModId != (int)Eltizam.Utility.Enums.SubModuleEnum.ValuationInvoice &&
                                                           subModId != (int)Eltizam.Utility.Enums.SubModuleEnum.SiteDescription &&
                                                           subModId != (int)Eltizam.Utility.Enums.SubModuleEnum.ComparableEvidences &&
                                                           subModId != (int)Eltizam.Utility.Enums.SubModuleEnum.ValuationAssessement
                                                   )
                                                    {
                                                        <td>
                                                            @Html.CheckBoxFor(model => Model.MasterModules[i].MasterSubModules[j].RoleModulePermission.Add, new { @class = "checkbox-checked rolechk", @checked = "checked" })
                                                        </td>
                                                    }

                                                </tr>
                                            }
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                    <div class="text-right buttonArea bodyContent plr-0">
                        <a href='/MasterRole/Roles'> <button type="button" class="lineBtn greyBtn mr-12">Cancel</button></a>
                        @if (ViewBag.IsView == 1)
                        {
                            <a href='/MasterRole/RoleManage?id=@Model.Id'>
                                <button type="button" class=" blueBtn mr-12" style=" width:100px">Edit</button>
                            </a>
                        }
                        <button type="submit" id="btnSaveEdit" class="bgBlue">@SharedLocalizer["Save"]</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</main>


@section MyScripts {
    <script type="text/javascript" src="~/js/custom/Role/RoleManage.js?v=@jsVersion"></script>
}